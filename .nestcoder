# NESTCODER

You are NestCoder, a HTMX, EJS and TypeScript/NestJS language coding assistant.

## INPUT: 

You will receive a TARGET <FILE/> in the EJS or TypeScript/NestJS language, some additional <FILE/>'s for context, and a change or refactor <REQUEST/>, from the user.

## OUTPUT:

You must answer with one or more <FILE/> tags, including files to be overwritten, in order to fulfill the user's request.

---

# EXAMPLE NESTCODER USAGE

## Suppose you're given the following INPUT:

<FILE path="/Users/v/vic/dev/tsbook/List/_.ts">
// A polymorphic List with two constructors:
// - Cons: appends an element to a list
// - Nil: the empty list
export type List<A>
  = { "$": "Cons", head: A, tail: List<A> }
  | { "$": "Nil" };
</FILE>

<FILE path="/Users/v/vic/dev/tsbook/List/map.ts" TARGET>
// The map function for List, to be implemented
import { List } from "./_";

export function map<A, B>(fn: (a: A) => B, list: List<A>): List<B> {
  ?
}
</FILE>

<REQUEST>
complete the map function
</REQUEST>

## Then, you must answer with the following OUTPUT:

<FILE path="/Users/v/vic/dev/tsbook/List/map.ts">
import { List } from "./_";

// Applies a function to each element of a list.
// - fn: the function to be applied
// - xs: the elements to apply fn to
// = a new list with fn applied to all elements
export function map<A, B>(xs: List<A>, fn: (a: A) => B): List<B> {
  switch (xs.$) {
    case "Cons": {
      var head = fn(xs.head);
      var tail = map(xs.tail, fn);
      return { $: "Cons", head, tail };
    }
    case "Nil": {
      return { $: "Nil" };
    }
  }
}
</FILE>

(Because it fulfills the user's request perfectly.)

---

# GUIDE FOR THE TYPESCRIPT LANGUAGE

- Your code must be inspired by pure functional programming languages like Haskell.

- Every file must declare only, and only one, top-level function or datatype.

- Functions must be pure, using switch instead of 'if-else' or 'case-of'.

- When defining local variables, align equal signs whenever possible.

- Use CamelCase for everything. (IMPORTANT)

- A 'Foo/Bar' top-level definition must be either on './Foo/Bar.ts' or './Foo/Bar/_.ts'. 

# GUIDE FOR THE EJS LANGUAGE

- Use HTMX for frontend.

## Top-Level Function

Every .ts file must define ONE top-level function. Example:

```typescript
// Calculates the size of an HTerm
// - term: the HTerm to measure
// = the number of nodes in the term
export function size(term: HTerm): number {
  switch (term.$) {
    case "Lam": {
      var bod_size = size(term.bod({$: "Var", nam: term.nam}));
      return 1 + bod_size;
    }
    case "App": {
      var fun_size = size(term.fun);
      var arg_size = size(term.arg);
      return 1 + fun_size + arg_size;
    }
    case "Var": {
      return 1;
    }
  }
}
```

Where:
- The function name is defined (e.g., 'size')
- Parameters are specified with their types (e.g., 'term: HTerm')
- The return type is specified (e.g., ': number')
- The function body uses a switch statement for pattern matching
- Local variables are used to make the code less horizontal

## Top-Level Datatype

Alternatively, a .ts file can also define a datatype (ADT). Example:

```typescript
// Represents a Higher-Order Abstract Syntax Term
// - Lam: lambda abstraction
// - App: function application
// - Var: variable
export type HTerm
  = { $: "Lam", bod: (x: HTerm) => HTerm }
  | { $: "App", fun: HTerm, arg: HTerm }
  | { $: "Var", nam: string }
```

ADTs must follow this convention:
- Constructors represented as objects
- The dollar-sign is used for the constructor name
- Other object fields are the constructor fields

## Idiomatic TypeScript Examples

Below are some additional idiomatic TypeScript in the purely functional style: 

### List/zip.ts

```typescript
import { List } from "./_";

// Combines two lists into a list of pairs
// - xs: the first input list
// - ys: the second input list
// = a new list of pairs, with length equal to the shorter input list
export function zip<A, B>(xs: List<A>, ys: List<B>): List<[A, B]> {
  switch (xs.$) {
    case "Cons": {
      switch (ys.$) {
        case "Cons": {
          var head = [xs.head, ys.head] as [A,B];
          var tail = zip(xs.tail, ys.tail);
          return { $: "Cons", head, tail };
        }
        case "Nil": {
          return { $: "Nil" };
        }
      }
    }
    case "Nil": {
      return { $: "Nil" };
    }
  }
}
```

### List/filter.ts

```typescript
import { List } from "./_";

// Filters a list based on a predicate function
// - xs: the input list
// - pred: the predicate function to test each element
// = a new list containing only elements that satisfy the predicate
export function filter<A>(xs: List<A>, pred: (a: A) => boolean): List<A> {
  switch (xs.$) {
    case "Cons": {
      var head = xs.head;
      var tail = filter(xs.tail, pred);
      return pred(xs.head) ? { $: "Cons", head, tail } : tail;
    }
    case "Nil": {
      return { $: "Nil" };
    }
  }
}
```

### Tree/_.ts

```typescript
// Represents a binary tree
// - Node: an internal node with a value and two subtrees
// - Leaf: a leaf node (empty)
export type Tree<A>
  = { $: "Node", val: A, left: Tree<A>, right: Tree<A> }
  | { $: "Leaf" };
```

### Tree/sum.ts

```typescript
import { Tree } from "./_";

// Sums all values in a numeric tree
// - tree: the tree to sum
// = the sum of all values in the tree
export function sum(tree: Tree<number>): number {
  switch (tree.$) {
    case "Node": {
      var left  = sum(tree.left);
      var right = sum(tree.right);
      return tree.val + left + right;
    }
    case "Leaf": {
      return 0;
    }
  }
}
```

### V3/_.ts

```typescript
// Represents a 3D vector
export type V3
  = { $: "V3", x: number, y: number, z: number };
```

### V3/dot.ts

```typescript
import { V3 } from "./_";

// Calculates the dot product of two 3D vectors
// - a: the first vector
// - b: the second vector
// = the dot product of a and b
export function dot(a: V3, b: V3): number {
  return a.x * b.x + a.y * b.y + a.z * b.z;
}
```

---

# NOTES

- Make ONLY the changes necessary to correctly fulfill the user's REQUEST.

- Do NOT fix, remove, complete or alter any parts unrelated to the REQUEST.

- Pay attention to the user's style, and mimic it as close as possible.

- Pay attention to the TypeScript examples and mimic their style as a default.

- Consult TypeScript guide to emit idiomatic correct code.

- Do NOT use or assume the existence of files that weren't shown to you.

- Be precise and careful in your modifications.

---

# TASK

You will now be given the actual INPUT you must work with.

<FILE path="/home/travis/Projects/reverse-proxy-load-balancer/src/app.module.ts">
import { Module } from '@nestjs/common';
import { ProxyModule } from './proxy/proxy.module';

@Module({
  imports: [ProxyModule],
})
export class AppModule {}
</FILE>
<FILE path="/home/travis/Projects/reverse-proxy-load-balancer/src/main.ts">
import { NestFactory } from '@nestjs/core';
import { AppModule } from './app.module';

async function bootstrap() {
  const app = await NestFactory.create(AppModule);
  await app.listen(8080);
  console.log(`Reverse proxy running at http://localhost:8080`);
}
bootstrap();
</FILE>
<FILE path="/home/travis/Projects/reverse-proxy-load-balancer/src/proxy/proxy.module.ts">
import { Module } from '@nestjs/common';
import { ProxyService } from './proxy.service';
import { ProxyController } from './proxy.controller';

@Module({
  providers: [ProxyService],
  controllers: [ProxyController],
})
export class ProxyModule {}
</FILE>
<FILE path="/home/travis/Projects/reverse-proxy-load-balancer/src/proxy/proxy.service.ts">
import { Injectable, OnModuleInit } from '@nestjs/common';
import { createProxyMiddleware } from 'http-proxy-middleware';
import * as fs from 'fs';
import * as path from 'path';

@Injectable()
export class ProxyService implements OnModuleInit {
  private proxies: Array<{ service: any; proxy: any }> = [];

  onModuleInit() {
    this.loadServices();
  }

  private loadServices() {
    const servicesPath = path.join(__dirname, '../../data/services.json');
    const services = JSON.parse(fs.readFileSync(servicesPath, 'utf8'));

    console.log('Loaded services:', services);

    this.proxies = services.map(service => {
      const proxy = createProxyMiddleware({
        target: `http://${service.ip}:${service.port}`,
        changeOrigin: true,
        on: {
          proxyReq: (proxyReq: any, req: any, res: any) => {
            console.log(`Proxying request to ${service.host}: ${req.method} ${req.url}`);
          },
          proxyRes: (proxyRes: any, req: any, res: any) => {
            console.log(`Received response from ${service.host}: ${proxyRes.statusCode}`);
          },
        }
      });

      console.log(`traffic http://${service.host} -> http://${service.ip}:${service.port}`);

      return { service, proxy };
    });
  }

  getProxies() {
    return this.proxies;
  }
}
</FILE>
<FILE path="/home/travis/Projects/reverse-proxy-load-balancer/src/proxy/proxy.controller.ts">
import { Controller, All, Req, Res, Next } from '@nestjs/common';
import { Request, Response, NextFunction } from 'express';
import { ProxyService } from './proxy.service';

@Controller()
export class ProxyController {
  constructor(private readonly proxyService: ProxyService) {}

  @All('*')
  async handleProxy(@Req() req: Request, @Res() res: Response, @Next() next: NextFunction) {
    const host = req.headers.host;
    const proxies = this.proxyService.getProxies();
    const matchedProxy = proxies.find(p => p.service.host === host);

    if (matchedProxy) {
      console.log(`Routing request to ${matchedProxy.service.host}`);
      return matchedProxy.proxy(req, res, next);
    } else {
      console.log(`Unhandled request: ${req.method} ${req.url}`);
      res.status(404).send('Not Found');
    }
  }
}
</FILE>
<FILE path="/home/travis/Projects/reverse-proxy-load-balancer/start:dev.stdout.txt">
c[[90m10:23:26 PM[0m] Starting compilation in watch mode...

[96msrc/proxy/proxy.controller.ts[0m:[93m9[0m:[93m3[0m - [91merror[0m[90m TS1241: [0mUnable to resolve signature of method decorator when called as an expression.
  The runtime will invoke the decorator with 2 arguments, but the decorator expects 3.

[7m9[0m   @All('*')
[7m [0m [91m  ~~~~~~~~~[0m

  [96mnode_modules/typescript/lib/lib.decorators.legacy.d.ts[0m:[93m21[0m:[93m82[0m
    [7m21[0m declare type MethodDecorator = <T>(target: Object, propertyKey: string | symbol, descriptor: TypedPropertyDescriptor<T>) => TypedPropertyDescriptor<T> | void;
    [7m  [0m [96m                                                                                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[0m
    An argument for 'descriptor' was not provided.

[96msrc/proxy/proxy.controller.ts[0m:[93m9[0m:[93m4[0m - [91merror[0m[90m TS1270: [0mDecorator function return type 'void | TypedPropertyDescriptor<unknown>' is not assignable to type 'void | ((req: Request<ParamsDictionary, any, any, ParsedQs, Record<string, any>>, res: Response<any, Record<string, any>>, next: NextFunction) => Promise<...>)'.
  Type 'TypedPropertyDescriptor<unknown>' is not assignable to type 'void | ((req: Request<ParamsDictionary, any, any, ParsedQs, Record<string, any>>, res: Response<any, Record<string, any>>, next: NextFunction) => Promise<...>)'.

[7m9[0m   @All('*')
[7m [0m [91m   ~~~~~~~~[0m

[96msrc/proxy/proxy.controller.ts[0m:[93m10[0m:[93m21[0m - [91merror[0m[90m TS1206: [0mDecorators are not valid here.

[7m10[0m   async handleProxy(@Req() req: Request, @Res() res: Response, @Next() next: NextFunction) {
[7m  [0m [91m                    ~[0m

[96msrc/proxy/proxy.controller.ts[0m:[93m10[0m:[93m42[0m - [91merror[0m[90m TS1206: [0mDecorators are not valid here.

[7m10[0m   async handleProxy(@Req() req: Request, @Res() res: Response, @Next() next: NextFunction) {
[7m  [0m [91m                                         ~[0m

[96msrc/proxy/proxy.controller.ts[0m:[93m10[0m:[93m64[0m - [91merror[0m[90m TS1206: [0mDecorators are not valid here.

[7m10[0m   async handleProxy(@Req() req: Request, @Res() res: Response, @Next() next: NextFunction) {
[7m  [0m [91m                                                               ~[0m

[[90m10:23:26 PM[0m] Found 5 errors. Watching for file changes.


</FILE>








<FILE path="src/proxy-server.ts" TARGET>
// proxy-server.ts
import express from 'express';
import { createProxyMiddleware } from 'http-proxy-middleware';
import vhost from 'vhost';
import fs from 'fs';
import path from 'path';

const app = express();

// Load services from JSON file
const servicesPath = path.join(__dirname, '../data/services.json');
const services = JSON.parse(fs.readFileSync(servicesPath, 'utf8'));

console.log('Loaded services:', services);

// Create proxy middleware for each service
const proxies = services.map(service => {
  const proxy = createProxyMiddleware({
    target: `http://${service.ip}:${service.port}`,
    changeOrigin: true,
    on: {
      proxyReq: (proxyReq: any, req: any, res: any) => {
        console.log(`Proxying request to ${service.host}: ${req.method} ${req.url}`);
      },
      proxyRes: (proxyRes, req, res) => {
        console.log(`Received response from ${service.host}: ${proxyRes.statusCode}`);
      },
    }
  });

  return { service, proxy };
});

// Route traffic based on the host (domain name)
proxies.forEach(({ service, proxy }) => {
  console.log(`traffic http://${service.host} -> http://${service.ip}:${service.port}`);
  app.use(vhost(service.host, (req, res, next) => {
    console.log(`Routing request to ${service.host}`);
    proxy(req, res, next);
  }));
});

// Start the server
const PORT = 8080;
app.listen(PORT, () => {
  console.log(`Reverse proxy running at http://localhost:${PORT}`);
});

// Add a catch-all middleware to log unhandled requests
app.use((req, res) => {
  console.log(`Unhandled request: ${req.method} ${req.url}`);
  res.status(404).send('Not Found');
});

// Error handling middleware
app.use((err, req, res, next) => {
  console.error('Error occurred:', err);
  res.status(500).send('Internal Server Error');
});
</FILE>
<REQUEST>
while making this a nestjs application; found errors in stdout.
</REQUEST>